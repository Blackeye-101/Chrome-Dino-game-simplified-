// document.addEventListener("DOMContentLoaded", () => {
//     // all the code inside this if we add the script tag at the beginning.
//     //this ensures that all the HTML and the styling is loaded first before any js is loaded
//     // not required if script tag is added at the bottom of the html document.
// });

const dino = document.querySelector(".dino");
const grid = document.querySelector(".grid");
let isJumping = false;
let gravity = 0.9;
//because realism and newton

let isGameOver = false;
const alert = document.getElementById("alert");

function control(e) {
  if (e.keyCode === 32) {
    if (!isJumping) {
      isJumping = true;
      //to stop it from jumping midair
      //if dino is currently jumping you cant make it jump again.
      jump();
    }
  }
  //keycode.info <- website to help you with identifying key codes
}

document.addEventListener("keyup", control);

let position = 0;
//starting point for the dino

//implementing the jump functionality.
function jump() {
  //we want a jump type animation effect so we would move up by 10px till we reach 150 px.
  let count = 0;

  let timerId = setInterval(function () {
    //move down
    if (count === 15) {
      clearInterval(timerId);
      //we have to stop the up functionality otherwise it would just stop at 150px

      let downTimerId = setInterval(function () {
        if (count === 0) {
          clearInterval(downTimerId);
          //similarly we need to stop our dino going into the ground.

          isJumping = false;
          //once it is on the ground then we enable jumping again
        }
        position -= 5;
        count--;
        position *= gravity;
        dino.style.bottom = position + "px";
        console.log(dino.style.bottom);
      }, 20);
    }
    //move up;
    count++;
    position += 30;
    position *= gravity; //this would never become 150 as it would go on becoming smaller and smaller.
    //thus we use count as parameter to decide when we want to bring it down.
    dino.style.bottom = position + "px";
    console.log(dino.style.bottom);
  }, 20);
}

//implementing the obstacle spawn
function spawnObstacles() {
  let randomTime = Math.random() * 4000;
  let obstaclePosition = 1000;
  const obstacle = document.createElement("div");
  if (!isGameOver) {
    obstacle.classList.add("obstacle");
    //once the game gets over then even though the obstacles get generated they dont have the styling thus dont appear.
  }
  grid.appendChild(obstacle);
  obstacle.style.left = obstaclePosition + "px";

  //moving the obstacles
  let timerId = setInterval(function () {
    //code;

    if (obstaclePosition > 0 && obstaclePosition < 60 && position < 60) {
      clearInterval(timerId);
      alert.innerHTML = "Game Over";
      isGameOver = true;

      //remove all children div of a parent div
      while (grid.firstChild) {
        grid.removeChild(grid.lastChild);
        //when game gets over everything dissapears.
      }
    }
    obstaclePosition -= 10;
    obstacle.style.left = obstaclePosition + "px";
  }, 20);
  if (!isGameOver) {
    setTimeout(spawnObstacles, randomTime);
  }
  //spawning obstacles at random time generated by the random time variable and setTimeout function
  //The setTimeout() method calls a function or evaluates an expression after a specified number of milliseconds.
}

spawnObstacles();
